{"version":3,"sources":["word.js","keyBoard.js","App.js","serviceWorker.js","index.js"],"names":["Word","_ref","letter","clickChecked","react_default","a","createElement","className","KeyBoard","alpha","onClick","correct","wrong","concat","matched","guesses","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","verify","state","win","lose","won","setState","word","generateWords","keyBoard","alphabet","clicked","Set","again","reset","bind","assertThisInitialized","window","addEventListener","e","keyCode","key","memo","shuffle","pop","toLowerCase","i","length","push","String","fromCharCode","_this2","add","newGuesses","array","set","_this3","has","removeEventListener","_this4","result","map","index","src_word_0","src_keyBoard","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4808dacc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './word.css'\r\n\r\nconst hidden = '_'\r\n\r\nconst Word = ({letter, clickChecked}) => (\r\n      <li className='letter'>{clickChecked ? letter : hidden}</li>\r\n)\r\n\r\nexport default Word","import React from 'react'\r\n\r\nimport './keyBoard.css'\r\n\r\nconst KeyBoard = ({alpha, onClick, correct, wrong}) => (\r\n  <li className={`alpha ${correct ? 'correct' : ''} ${wrong ? 'wrong' : ''}`} onClick={() => onClick(alpha)}>{alpha}</li>\r\n)\r\n\r\nexport default KeyBoard","import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css';\n\nimport Word from './word'\nimport KeyBoard from './keyBoard'\n\nlet matched = []\nconst guesses = 5\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      word: this.generateWords(),\n      guesses: guesses,\n      keyBoard: this.alphabet(),\n      clicked: new Set(),\n      correct: new Set(matched[0]),\n      wrong: new Set(),\n      lose: false,\n      win: false,\n      again: false\n    }\n    this.reset = this.reset.bind(this)\n    window.addEventListener('keypress', (e) =>{\n      if(e.keyCode === 13 || e.keyCode === 32){return}\n      this.verify(e.key);\n    })\n  }\n  \n  generateWords() {\n    matched = []\n    const word = []\n    const words = [\"Fleur\", \"Elephant\", \"Dinosaure\", \"Dispositif\", \"Camp\", \"Gorille\", \"Parents\", \"Charrue\", \"Arbre\", \"Chien\", \"Chat\", \"Anticonstitutionnellement\", \"Algerie\", \"Nintendo\", \"Stage\"]\n    const memo =  shuffle(words).pop().toLowerCase();\n    for (let i = 0; i < memo.length; i++) {\n      word.push(memo[i])\n      matched.push(memo[i])\n    }\n    return word\n  }\n\n  alphabet() {\n    const keyBoard = []\n    for (let i = 65; i <= 90; i++) \n      keyBoard.push(String.fromCharCode(i))\n    return keyBoard\n  }\n\n  verify = alpha => {\n    if(this.state.win === true){ return }\n    if(this.state.lose === true || this.state.guesses === 0){ \n      this.setState({lose: true})\n      return \n    }\n    this.correct(alpha)\n    this.won(matched, this.state.correct)\n  }\n\n  correct(alpha){\n    alpha = alpha.toLowerCase()\n    // console.log(alpha)\n    for(let i = 0; i < matched.length; i++){\n      if (matched[i] === alpha){ return this.setState({correct: this.state.correct.add(alpha)})} \n    }\n    const newGuesses = this.state.guesses - 1\n    this.setState({wrong: this.state.wrong.add(alpha), guesses: newGuesses})\n    // console.log(this.state.guesses)\n    if(this.state.guesses === 0){ \n      // console.log('Ã§a entre')\n      this.setState({lose: true}) \n      window.addEventListener(\"keypress\", (e)=>{\n        if(e.keyCode === 13){this.reset()}\n      })\n    }\n  }\n\n  won(array, set) {\n    for(let i = 0; i < array.length; i++)\n        if(!set.has(array[i]))\n            return\n    this.setState({win: true})\n    window.addEventListener(\"keypress\", (e)=>{\n      if(e.keyCode === 13){this.reset()}\n    })\n  }\n\n  reset(){\n    this.setState({\n      word: this.generateWords(),\n      guesses: guesses,\n      clicked: new Set(),\n      correct: new Set(matched[0]),\n      wrong: new Set(),\n      lose: false,\n      win: false,\n      again: true\n    })\n    window.removeEventListener(\"keypress\", ()=>{})\n  }\n   \n  render() {\n    const result = this.state.win || this.state.lose\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 className=\"title\">PENDU</h1>\n        </header>\n        <main>\n          <div className=\"board\">\n            <ul className=\"word\">\n              {this.state.word.map( (letter, index) =>(\n                <Word letter={letter} key={index} index={index} clickChecked={this.state.correct.has(letter)}/>\n              ))}\n            </ul>\n            {result && <span className=\"result\">YOU {this.state.win ? 'WIN' : 'LOSE'}</span>}\n            <ul className=\"keyBoard\">\n              {this.state.keyBoard.map( (alpha, index) =>(\n                <KeyBoard alpha={alpha} key={index} correct={this.state.correct.has(alpha.toLowerCase())} wrong={this.state.wrong.has(alpha.toLowerCase())} onClick={this.verify}/>\n              ))}\n            </ul>\n          </div>\n          <div className=\"info\">\n            <p className=\"guesses\">Il vous reste <span>{this.state.guesses}</span> {this.state.guesses > 1 ?  'tentatives' : 'tentative'}.</p>\n            <button onClick={this.reset}>Recommencer</button>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}